// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // url      = "file:./db.sqlite"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Users {
  id        String      @id @unique @default(cuid())
  fullName  String
  userName  String
  email     String      @unique
  password  String
  role      Role        @default(CLIENT)
  profile   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Likes     Likes[]
  Musics    Musics[]
  PlayLists PlayLists[]
}

model Likes {
  id        String   @id @unique @default(cuid())
  musicId   Musics   @relation(fields: [musicsId], references: [id], onDelete: Cascade)
  userId    Users    @relation(fields: [usersId], references: [id], onDelete: SetNull)
  musicsId  String
  usersId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Musics {
  id           String         @id @unique @default(cuid())
  title        String
  year         DateTime       @db.Date
  musicLink    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  userId       Users          @relation(fields: [usersId], references: [id], onDelete: SetNull)
  Likes        Likes[]
  usersId      String
  PlayListItem PlayListItem[]
  SingerItem   SingerItem[]
  GenreItem    GenreItem[]
}

model PlayLists {
  id           String         @id @unique @default(cuid())
  name         String
  userId       Users          @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId      String
  PlayListItem PlayListItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Genres {
  id        String      @id @unique @default(cuid())
  name      String
  GenreItem GenreItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Singers {
  id         String       @id @unique @default(cuid())
  name       String
  SingerItem SingerItem[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model PlayListItem {
  id          String    @id @unique @default(cuid())
  musicId     Musics    @relation(fields: [musicsId], references: [id], onDelete: Cascade)
  playListId  PlayLists @relation(fields: [playListsId], references: [id], onDelete: Cascade)
  musicsId    String
  playListsId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SingerItem {
  id        String   @id @unique @default(cuid())
  singer    Singers  @relation(fields: [singersId], references: [id], onDelete: Cascade)
  musicId   Musics   @relation(fields: [musicsId], references: [id], onDelete: Cascade)
  singersId String
  musicsId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GenreItem {
  id        String   @id @unique @default(cuid())
  genreId   Genres   @relation(fields: [genresId], references: [id], onDelete: Cascade)
  musicId   Musics   @relation(fields: [musicsId], references: [id], onDelete: Cascade)
  genresId  String
  musicsId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  CLIENT
}

// create user profile and file uploading api in probably nest or maybe express??
